/**
 * C65
 * Copyright (C) 2019 David Jolly
 *
 * C65 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * C65 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef C65_TOOL_LAUNCHER_TYPE_H_
#define C65_TOOL_LAUNCHER_TYPE_H_

#include "../include/type/exception.h"

namespace c65 {

	namespace tool {

		#define C65_TOOL_LAUNCHER_HEADER "[C65::TOOL::LAUNCHER]"
#ifndef NDEBUG
		#define C65_TOOL_LAUNCHER_EXCEPTION_HEADER C65_TOOL_LAUNCHER_HEADER " "
#else
		#define C65_TOOL_LAUNCHER_EXCEPTION_HEADER
#endif // NDEBUG

		enum {
			C65_TOOL_LAUNCHER_EXCEPTION_ACTION_INVALID = 0,
			C65_TOOL_LAUNCHER_EXCEPTION_ARGUMENT_INVALID,
			C65_TOOL_LAUNCHER_EXCEPTION_ARGUMENT_MISMATCH,
			C65_TOOL_LAUNCHER_EXCEPTION_INTERNAL,
			C65_TOOL_LAUNCHER_EXCEPTION_INTERRUPT_INVALID,
			C65_TOOL_LAUNCHER_EXCEPTION_REGISTER_INVALID,
		};

		#define C65_TOOL_LAUNCHER_EXCEPTION_MAX C65_TOOL_LAUNCHER_EXCEPTION_REGISTER_INVALID

		static const std::string C65_TOOL_LAUNCHER_EXCEPTION_STR[] = {
			C65_TOOL_LAUNCHER_EXCEPTION_HEADER "Invalid action", // C65_TOOL_LAUNCHER_EXCEPTION_ACTION_INVALID
			C65_TOOL_LAUNCHER_EXCEPTION_HEADER "Invalid argument", // C65_TOOL_LAUNCHER_EXCEPTION_ARGUMENT_INVALID
			C65_TOOL_LAUNCHER_EXCEPTION_HEADER "Mismatch argument", // C65_TOOL_LAUNCHER_EXCEPTION_ARGUMENT_MISMATCH
			C65_TOOL_LAUNCHER_EXCEPTION_HEADER "Internal exception", // C65_TOOL_LAUNCHER_EXCEPTION_INTERNAL
			C65_TOOL_LAUNCHER_EXCEPTION_HEADER "Invalid interrupt", // C65_TOOL_LAUNCHER_EXCEPTION_INTERRUPT_INVALID
			C65_TOOL_LAUNCHER_EXCEPTION_HEADER "Invalid register", // C65_TOOL_LAUNCHER_EXCEPTION_REGISTER_INVALID
			};

		#define C65_TOOL_LAUNCHER_EXCEPTION_STRING(_TYPE_) \
			(((_TYPE_) > C65_TOOL_LAUNCHER_EXCEPTION_MAX) ? STRING_UNKNOWN : \
				STRING(C65_TOOL_LAUNCHER_EXCEPTION_STR[_TYPE_]))

		#define THROW_C65_TOOL_LAUNCHER_EXCEPTION(_EXCEPT_) \
			THROW_C65_TOOL_LAUNCHER_EXCEPTION_FORMAT(_EXCEPT_, "", "")
		#define THROW_C65_TOOL_LAUNCHER_EXCEPTION_FORMAT(_EXCEPT_, _FORMAT_, ...) \
			THROW_EXCEPTION(C65_TOOL_LAUNCHER_EXCEPTION_STRING(_EXCEPT_), _FORMAT_, __VA_ARGS__)

		enum {
			ACTION_CYCLE = 0,
			ACTION_DISASSEMBLE,
			ACTION_DUMP,
			ACTION_EXIT,
			ACTION_HELP,
			ACTION_INTERRUPT,
			ACTION_LOAD,
			ACTION_PROCESSOR,
			ACTION_READ_BYTE,
			ACTION_READ_REGISTER,
			ACTION_READ_STATUS,
			ACTION_READ_WORD,
			ACTION_RESET,
			ACTION_RUN,
			ACTION_STEP,
			ACTION_UNLOAD,
			ACTION_VERSION,
			ACTION_WRITE_BYTE,
			ACTION_WRITE_REGISTER,
			ACTION_WRITE_STATUS,
			ACTION_WRITE_WORD,
		};

		#define ACTION_MAX ACTION_WRITE_WORD

		static const size_t ACTION_ARGUMENT_LEN[] = {
			0, // ACTION_CYCLE
			2, // ACTION_DISASSEMBLE
			2, // ACTION_DUMP
			0, // ACTION_EXIT
			0, // ACTION_HELP
			1, // ACTION_INTERRUPT
			2, // ACTION_LOAD
			0, // ACTION_PROCESSOR
			1, // ACTION_READ_BYTE
			1, // ACTION_READ_REGISTER
			0, // ACTION_READ_STATUS
			1, // ACTION_READ_WORD
			0, // ACTION_RESET
			0, // ACTION_RUN
			0, // ACTION_STEP
			2, // ACTION_UNLOAD
			0, // ACTION_VERSION
			2, // ACTION_WRITE_BYTE
			2, // ACTION_WRITE_REGISTER
			1, // ACTION_WRITE_STATUS
			2, // ACTION_WRITE_WORD
			};

		#define ACTION_ARGUMENT_LENGTH(_TYPE_) \
			(((_TYPE_) > ACTION_MAX) ? 0 : \
				ACTION_ARGUMENT_LEN[_TYPE_])

		static const std::string ACTION_ARGUMENT_STR[] = {
			"", // ACTION_CYCLE
			"<address> <count>", // ACTION_DISASSEMBLE
			"<address> <count>", // ACTION_DUMP
			"", // ACTION_EXIT
			"", // ACTION_HELP
			"<type>", // ACTION_INTERRUPT
			"<path> <address>", // ACTION_LOAD
			"", // ACTION_PROCESSOR
			"<address>", // ACTION_READ_BYTE
			"<register>", // ACTION_READ_REGISTER
			"", // ACTION_READ_STATUS
			"<address>", // ACTION_READ_WORD
			"", // ACTION_RESET
			"", // ACTION_RUN
			"", // ACTION_STEP
			"<address> <length>", // ACTION_UNLOAD
			"", // ACTION_VERSION
			"<address> <value>", // ACTION_WRITE_BYTE
			"<register> <value>", // ACTION_WRITE_REGISTER
			"<value>", // ACTION_WRITE_STATUS
			"<address> <value>", // ACTION_WRITE_WORD
			};

		#define ACTION_ARGUMENT_STRING(_TYPE_) \
			(((_TYPE_) > ACTION_MAX) ? STRING_UNKNOWN : \
				STRING(ACTION_ARGUMENT_STR[_TYPE_]))

		static const std::string ACTION_DESCRIPTION_STR[] = {
			"Display cycle information", // ACTION_CYCLE
			"Disassemble memory contents", // ACTION_DISASSEMBLE
			"Dump memory contents", // ACTION_DUMP
			"Exit console", // ACTION_EXIT
			"Display help information", // ACTION_HELP
			"Interrupt processor", // ACTION_INTERRUPT
			"Load data into memory", // ACTION_LOAD
			"Display processor information", // ACTION_PROCESSOR
			"Read byte from memory", // ACTION_READ_BYTE
			"Read register value", // ACTION_READ_REGISTER
			"Read status value", // ACTION_READ_STATUS
			"Read word from memory", // ACTION_READ_WORD
			"Reset processor", // ACTION_RESET
			"Run processor", // ACTION_RUN
			"Step processor", // ACTION_STEP
			"Unload data from memory", // ACTION_UNLOAD
			"Display version information", // ACTION_VERSION
			"Write byte to memory", // ACTION_WRITE_BYTE
			"Write register value", // ACTION_WRITE_REGISTER
			"Write status value", // ACTION_WRITE_STATUS
			"Write word to memory", // ACTION_WRITE_WORD
			};

		#define ACTION_DESCRIPTION_STRING(_TYPE_) \
			(((_TYPE_) > ACTION_MAX) ? STRING_UNKNOWN : \
				STRING(ACTION_DESCRIPTION_STR[_TYPE_]))

		static const std::string ACTION_LONG_STR[] = {
			"cycle", // ACTION_CYCLE
			"disassemble", // ACTION_DISASSEMBLE
			"dump", // ACTION_DUMP
			"exit", // ACTION_EXIT
			"help", // ACTION_HELP
			"interrupt", // ACTION_INTERRUPT
			"load", // ACTION_LOAD
			"processor", // ACTION_PROCESSOR
			"read-byte", // ACTION_READ_BYTE
			"read-register", // ACTION_READ_REGISTER
			"read-status", // ACTION_READ_STATUS
			"read-word", // ACTION_READ_WORD
			"reset", // ACTION_RESET
			"run", // ACTION_RUN
			"step", // ACTION_STEP
			"unload", // ACTION_UNLOAD
			"version", // ACTION_VERSION
			"write-byte", // ACTION_WRITE_BYTE
			"write-register", // ACTION_WRITE_REGISTER
			"write-status", // ACTION_WRITE_STATUS
			"write-word", // ACTION_WRITE_WORD
			};

		#define ACTION_LONG_STRING(_TYPE_) \
			(((_TYPE_) > ACTION_MAX) ? STRING_UNKNOWN : \
				STRING(ACTION_LONG_STR[_TYPE_]))

		static const std::string ACTION_SHORT_STR[] = {
			"c", // ACTION_CYCLE
			"da", // ACTION_DISASSEMBLE
			"d", // ACTION_DUMP
			"q", // ACTION_EXIT
			"?", // ACTION_HELP
			"i", // ACTION_INTERRUPT
			"l", // ACTION_LOAD
			"p", // ACTION_PROCESSOR
			"rb", // ACTION_READ_BYTE
			"rr", // ACTION_READ_REGISTER
			"rs", // ACTION_READ_STATUS
			"rw", // ACTION_READ_WORD
			"rt", // ACTION_RESET
			"r", // ACTION_RUN
			"s", // ACTION_STEP
			"u", // ACTION_UNLOAD
			"v", // ACTION_VERSION
			"wb", // ACTION_WRITE_BYTE
			"wr", // ACTION_WRITE_REGISTER
			"ws", // ACTION_WRITE_STATUS
			"ww", // ACTION_WRITE_WORD
			};

		#define ACTION_SHORT_STRING(_TYPE_) \
			(((_TYPE_) > ACTION_MAX) ? STRING_UNKNOWN : \
				STRING(ACTION_SHORT_STR[_TYPE_]))

		static const std::map<std::string, int> ACTION_MAP = {
			std::make_pair(ACTION_LONG_STRING(ACTION_CYCLE), ACTION_CYCLE), // ACTION_CYCLE
			std::make_pair(ACTION_LONG_STRING(ACTION_DISASSEMBLE), ACTION_DISASSEMBLE), // ACTION_DISASSEMBLE
			std::make_pair(ACTION_LONG_STRING(ACTION_DUMP), ACTION_DUMP), // ACTION_DUMP
			std::make_pair(ACTION_LONG_STRING(ACTION_EXIT), ACTION_EXIT), // ACTION_EXIT
			std::make_pair(ACTION_LONG_STRING(ACTION_HELP), ACTION_HELP), // ACTION_HELP
			std::make_pair(ACTION_LONG_STRING(ACTION_INTERRUPT), ACTION_INTERRUPT), // ACTION_INTERRUPT
			std::make_pair(ACTION_LONG_STRING(ACTION_LOAD), ACTION_LOAD), // ACTION_LOAD
			std::make_pair(ACTION_LONG_STRING(ACTION_PROCESSOR), ACTION_PROCESSOR), // ACTION_PROCESSOR
			std::make_pair(ACTION_LONG_STRING(ACTION_READ_BYTE), ACTION_READ_BYTE), // ACTION_READ_BYTE
			std::make_pair(ACTION_LONG_STRING(ACTION_READ_REGISTER), ACTION_READ_REGISTER), // ACTION_READ_REGISTER
			std::make_pair(ACTION_LONG_STRING(ACTION_READ_STATUS), ACTION_READ_STATUS), // ACTION_READ_STATUS
			std::make_pair(ACTION_LONG_STRING(ACTION_READ_WORD), ACTION_READ_WORD), // ACTION_READ_WORD
			std::make_pair(ACTION_LONG_STRING(ACTION_RESET), ACTION_RESET), // ACTION_RESET
			std::make_pair(ACTION_LONG_STRING(ACTION_RUN), ACTION_RUN), // ACTION_RUN
			std::make_pair(ACTION_LONG_STRING(ACTION_STEP), ACTION_STEP), // ACTION_STEP
			std::make_pair(ACTION_LONG_STRING(ACTION_UNLOAD), ACTION_UNLOAD), // ACTION_UNLOAD
			std::make_pair(ACTION_LONG_STRING(ACTION_VERSION), ACTION_VERSION), // ACTION_VERSION
			std::make_pair(ACTION_LONG_STRING(ACTION_WRITE_BYTE), ACTION_WRITE_BYTE), // ACTION_WRITE_BYTE
			std::make_pair(ACTION_LONG_STRING(ACTION_WRITE_REGISTER), ACTION_WRITE_REGISTER), // ACTION_WRITE_REGISTER
			std::make_pair(ACTION_LONG_STRING(ACTION_WRITE_STATUS), ACTION_WRITE_STATUS), // ACTION_WRITE_STATUS
			std::make_pair(ACTION_LONG_STRING(ACTION_WRITE_WORD), ACTION_WRITE_WORD), // ACTION_WRITE_WORD
			std::make_pair(ACTION_SHORT_STRING(ACTION_CYCLE), ACTION_CYCLE), // ACTION_CYCLE
			std::make_pair(ACTION_SHORT_STRING(ACTION_DISASSEMBLE), ACTION_DISASSEMBLE), // ACTION_DISASSEMBLE
			std::make_pair(ACTION_SHORT_STRING(ACTION_DUMP), ACTION_DUMP), // ACTION_DUMP
			std::make_pair(ACTION_SHORT_STRING(ACTION_EXIT), ACTION_EXIT), // ACTION_EXIT
			std::make_pair(ACTION_SHORT_STRING(ACTION_HELP), ACTION_HELP), // ACTION_HELP
			std::make_pair(ACTION_SHORT_STRING(ACTION_INTERRUPT), ACTION_INTERRUPT), // ACTION_INTERRUPT
			std::make_pair(ACTION_SHORT_STRING(ACTION_LOAD), ACTION_LOAD), // ACTION_LOAD
			std::make_pair(ACTION_SHORT_STRING(ACTION_PROCESSOR), ACTION_PROCESSOR), // ACTION_PROCESSOR
			std::make_pair(ACTION_SHORT_STRING(ACTION_READ_BYTE), ACTION_READ_BYTE), // ACTION_READ_BYTE
			std::make_pair(ACTION_SHORT_STRING(ACTION_READ_REGISTER), ACTION_READ_REGISTER), // ACTION_READ_REGISTER
			std::make_pair(ACTION_SHORT_STRING(ACTION_READ_STATUS), ACTION_READ_STATUS), // ACTION_READ_STATUS
			std::make_pair(ACTION_SHORT_STRING(ACTION_READ_WORD), ACTION_READ_WORD), // ACTION_READ_WORD
			std::make_pair(ACTION_SHORT_STRING(ACTION_RESET), ACTION_RESET), // ACTION_RESET
			std::make_pair(ACTION_SHORT_STRING(ACTION_RUN), ACTION_RUN), // ACTION_RUN
			std::make_pair(ACTION_SHORT_STRING(ACTION_STEP), ACTION_STEP), // ACTION_STEP
			std::make_pair(ACTION_SHORT_STRING(ACTION_UNLOAD), ACTION_UNLOAD), // ACTION_UNLOAD
			std::make_pair(ACTION_SHORT_STRING(ACTION_VERSION), ACTION_VERSION), // ACTION_VERSION
			std::make_pair(ACTION_SHORT_STRING(ACTION_WRITE_BYTE), ACTION_WRITE_BYTE), // ACTION_WRITE_BYTE
			std::make_pair(ACTION_SHORT_STRING(ACTION_WRITE_REGISTER), ACTION_WRITE_REGISTER), // ACTION_WRITE_REGISTER
			std::make_pair(ACTION_SHORT_STRING(ACTION_WRITE_STATUS), ACTION_WRITE_STATUS), // ACTION_WRITE_STATUS
			std::make_pair(ACTION_SHORT_STRING(ACTION_WRITE_WORD), ACTION_WRITE_WORD), // ACTION_WRITE_WORD
			};

		#define ACTION_SUPPORTED(_ARGUMENT_) \
			(ACTION_MAP.find(_ARGUMENT_) != ACTION_MAP.end())
		#define ACTION_TYPE(_ARGUMENT_) \
			ACTION_MAP.find(_ARGUMENT_)->second

		static const std::string ACTION_INTERRUPT_STR[] = {
			"nmi", // C65_INTERRUPT_NON_MASKABLE
			"irq", // C65_INTERRUPT_MASKABLE
			};

		#define ACTION_INTERRUPT_STRING(_TYPE_) \
			(((_TYPE_) > C65_INTERRUPT_MAX) ? STRING_UNKNOWN : \
				STRING(ACTION_INTERRUPT_STR[_TYPE_]))

		static const std::map<std::string, int> ACTION_INTERRUPT_MAP = {
			std::make_pair(ACTION_INTERRUPT_STRING(C65_INTERRUPT_NON_MASKABLE), C65_INTERRUPT_NON_MASKABLE), // C65_INTERRUPT_NON_MASKABLE
			std::make_pair(ACTION_INTERRUPT_STRING(C65_INTERRUPT_MASKABLE), C65_INTERRUPT_MASKABLE), // C65_INTERRUPT_MASKABLE
			};

		#define ACTION_INTERRUPT_SUPPORTED(_ARGUMENT_) \
			(ACTION_INTERRUPT_MAP.find(_ARGUMENT_) != ACTION_INTERRUPT_MAP.end())
		#define ACTION_INTERRUPT_TYPE(_ARGUMENT_) \
			ACTION_INTERRUPT_MAP.find(_ARGUMENT_)->second

		static const std::string ACTION_REGISTER_STR[] = {
			"a", // C65_REGISTER_ACCUMULATOR
			"x", // C65_REGISTER_INDEX_X
			"y", // C65_REGISTER_INDEX_Y
			"pc", // C65_REGISTER_PROGRAM_COUNTER
			"sp", // C65_REGISTER_STACK_POINTER
			};

		#define ACTION_REGISTER_STRING(_TYPE_) \
			(((_TYPE_) > C65_REGISTER_MAX) ? STRING_UNKNOWN : \
				STRING(ACTION_REGISTER_STR[_TYPE_]))

		static const std::map<std::string, int> ACTION_REGISTER_MAP = {
			std::make_pair(ACTION_REGISTER_STRING(C65_REGISTER_ACCUMULATOR), C65_REGISTER_ACCUMULATOR), // C65_REGISTER_ACCUMULATOR
			std::make_pair(ACTION_REGISTER_STRING(C65_REGISTER_INDEX_X), C65_REGISTER_INDEX_X), // C65_REGISTER_INDEX_X
			std::make_pair(ACTION_REGISTER_STRING(C65_REGISTER_INDEX_Y), C65_REGISTER_INDEX_Y), // C65_REGISTER_INDEX_Y
			std::make_pair(ACTION_REGISTER_STRING(C65_REGISTER_PROGRAM_COUNTER), C65_REGISTER_PROGRAM_COUNTER), // C65_REGISTER_PROGRAM_COUNTER
			std::make_pair(ACTION_REGISTER_STRING(C65_REGISTER_STACK_POINTER), C65_REGISTER_STACK_POINTER), // C65_REGISTER_STACK_POINTER
			};

		#define ACTION_REGISTER_SUPPORTED(_ARGUMENT_) \
			(ACTION_REGISTER_MAP.find(_ARGUMENT_) != ACTION_REGISTER_MAP.end())
		#define ACTION_REGISTER_TYPE(_ARGUMENT_) \
			ACTION_REGISTER_MAP.find(_ARGUMENT_)->second

		enum {
			ARGUMENT_DEBUG = 0,
			ARGUMENT_HELP,
			ARGUMENT_QUIET,
			ARGUMENT_VERSION,
		};

		#define ARGUMENT_DELIMITER "-"

		#define ARGUMENT_MAX ARGUMENT_VERSION
		#define ARGUMENT_MIN 1

		static const std::string ARGUMENT_DESCRIPTION_STR[] = {
			"Enable debug mode", // ARGUMENT_DEBUG
			"Display help information", // ARGUMENT_HELP
			"Enable quiet mode", // ARGUMENT_QUIET
			"Display version information", // ARGUMENT_VERSION
			};

		#define ARGUMENT_DESCRIPTION_STRING(_TYPE_) \
			(((_TYPE_) > ARGUMENT_MAX) ? STRING_UNKNOWN : \
				STRING(ARGUMENT_DESCRIPTION_STR[_TYPE_]))

		static const std::string ARGUMENT_LONG_STR[] = {
			ARGUMENT_DELIMITER ARGUMENT_DELIMITER "debug", // ARGUMENT_DEBUG
			ARGUMENT_DELIMITER ARGUMENT_DELIMITER "help", // ARGUMENT_HELP
			ARGUMENT_DELIMITER ARGUMENT_DELIMITER "quiet", // ARGUMENT_QUIET
			ARGUMENT_DELIMITER ARGUMENT_DELIMITER "version", // ARGUMENT_VERSION
			};

		#define ARGUMENT_LONG_STRING(_TYPE_) \
			(((_TYPE_) > ARGUMENT_MAX) ? STRING_UNKNOWN : \
				STRING(ARGUMENT_LONG_STR[_TYPE_]))

		static const std::string ARGUMENT_SHORT_STR[] = {
			ARGUMENT_DELIMITER "d", // ARGUMENT_DEBUG
			ARGUMENT_DELIMITER "h", // ARGUMENT_HELP
			ARGUMENT_DELIMITER "q", // ARGUMENT_QUIET
			ARGUMENT_DELIMITER "v", // ARGUMENT_VERSION
			};

		#define ARGUMENT_SHORT_STRING(_TYPE_) \
			(((_TYPE_) > ARGUMENT_MAX) ? STRING_UNKNOWN : \
				STRING(ARGUMENT_SHORT_STR[_TYPE_]))

		static const std::map<std::string, int> ARGUMENT_MAP = {
			std::make_pair(ARGUMENT_LONG_STRING(ARGUMENT_DEBUG), ARGUMENT_DEBUG), // ARGUMENT_DEBUG
			std::make_pair(ARGUMENT_LONG_STRING(ARGUMENT_HELP), ARGUMENT_HELP), // ARGUMENT_HELP
			std::make_pair(ARGUMENT_LONG_STRING(ARGUMENT_QUIET), ARGUMENT_QUIET), // ARGUMENT_QUIET
			std::make_pair(ARGUMENT_LONG_STRING(ARGUMENT_VERSION), ARGUMENT_VERSION), // ARGUMENT_VERSION
			std::make_pair(ARGUMENT_SHORT_STRING(ARGUMENT_DEBUG), ARGUMENT_DEBUG), // ARGUMENT_DEBUG
			std::make_pair(ARGUMENT_SHORT_STRING(ARGUMENT_HELP), ARGUMENT_HELP), // ARGUMENT_HELP
			std::make_pair(ARGUMENT_SHORT_STRING(ARGUMENT_QUIET), ARGUMENT_QUIET), // ARGUMENT_QUIET
			std::make_pair(ARGUMENT_SHORT_STRING(ARGUMENT_VERSION), ARGUMENT_VERSION), // ARGUMENT_VERSION
			};

		#define ARGUMENT_SUPPORTED(_ARGUMENT_) \
			(ARGUMENT_MAP.find(_ARGUMENT_) != ARGUMENT_MAP.end())
		#define ARGUMENT_TYPE(_ARGUMENT_) \
			ARGUMENT_MAP.find(_ARGUMENT_)->second

		#define BLOCK_WIDTH 16

		#define CHARACTER_FILL '.'

		#define HISTORY_MAX 10

		#define PROMPT "\n% "

		#define USAGE "c65 [args]"
	}
}

#endif // C65_TOOL_LAUNCHER_TYPE_H_
